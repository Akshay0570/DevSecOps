pipeline {
      environment {
        
        target_url="http://192.168.228.132:81"
        Nmap="192.168.228.132"
        
    }
    
    agent any
   
    stages {
        stage('Checkout using SOURCE_BRANCH') {
             
            steps { 
             git branch: 'master', url: 'https://Mukeshit91@bitbucket.org/Mukeshit91/docker-vulnerable-dvwa.git'
   }
        }
        stage ('Check-Git-Secrets') {
        
        steps {
           // sh 'pip3 install detect-secrets'
           sh 'sudo rm gitsecret_report.json || true'
            //sh "chmod +x -R ${env.WORKSPACE}"
            sh 'ls -la'
           //sh 'sudo /home/ubuntu/.local/bin/detect-secrets  scan > gitsecret_report.json'
            //sh 'sudo /home/ubuntu/.local/bin/detect-secrets scan'
            //sh '/usr/local/bin/detect-secrets  scan > gitsecret_report.json'
             sh 'detect-secrets -C . scan >gitsecret_report.json'
            sh 'cat gitsecret_report.json || true'
            
            //sh 'sudo docker run --rm -t gesellix/trufflehog --json https://bitbucket.org/Mukeshit91/docker-vulnerable-dvwa.git > trufflehog.json'

            //sh 'cat trufflehog.json'
            
            sh '''
             time=$(date +'%Y-%m-%d')        
		sudo curl --location --request POST 'http://192.168.228.132:8080/api/v2/import-scan/' \
--header 'Authorization: Token 2e0eb13f2aed51caf04f270f2c9b32359f321998' \
--form 'engagement="1"' \
--form 'verified="true"' \
--form 'active="true"' \
--form 'lead="1"' \
--form tags=$BUILD_NUMBER \
--form scan_date=$date \
--form 'scan_type="Detect-secrets Scan"' \
--form 'minimum_severity="Info"' \
--form 'skip_duplicates="true"' \
--form 'close_old_findings="false"' \
--form 'file=@"gitsecret_report.json"'

'''
        }
        }
        
         stage ('Source-Composition-Analysis') {
            
         
        steps {
            //sh 'sudo rm var/lib/jenkins/workspace/Devsecops/odc-reports/dependency-check-report.xml|| true'
            //sh 'rm owasp-* || true'
            sh 'ls -lrth'
           // sh 'sudo chown -R jenkins:jenkins /var/lib/jenkins/workspace/Devsecops'
          // sh 'sudo chown -R ubuntu:ubuntu /var/lib/jenkins/workspace/Devsecops'
          // sh 'sudo chown -R $(id -u ${USER}):$(id -g ${USER}) ${WORKSPACE}'
          sh 'sudo chown -R $(id -u ${USER}):$(id -g ${USER}) ${WORKSPACE}/odc-reports || true'
           //sh 'wget https://raw.githubusercontent.com/devopssecure/webapp/master/owasp-dependency-check.sh'
            sh 'sudo chmod +x owasp-dependency-check.sh'
            sh 'sudo ./owasp-dependency-check.sh'
            sh 'cat ${WORKSPACE}/odc-reports/dependency-check-report.xml'
            
            sh '''
             time=$(date +'%Y-%m-%d')        
		sudo curl --location --request POST 'http://192.168.228.132:8080/api/v2/import-scan/' \
--header 'Authorization: Token 2e0eb13f2aed51caf04f270f2c9b32359f321998' \
--form 'engagement="1"' \
--form 'verified="true"' \
--form 'active="true"' \
--form 'lead="1"' \
--form tags=$BUILD_NUMBER \
--form scan_date=$date \
--form 'scan_type="Dependency Check Scan"' \
--form 'minimum_severity="Info"' \
--form 'skip_duplicates="true"' \
--form 'close_old_findings="false"' \
--form 'file=@"odc-reports/dependency-check-report.xml"'

'''
        
    }
}  

stage('SonarQube Analysis')
           {

            steps{
             
    sh '''
    docker run \
      --rm \
      -v "$(pwd):/usr/src" \
      sonarsource/sonar-scanner-cli \
      -Dsonar.projectKey=sonar-report \
      -Dsonar.sources=. \
      -Dsonar.host.url=http://192.168.228.132:9000 \
      -Dsonar.login=sqp_0ca99df9d03069b4f1088e8c8c63d4dd038530c8
    '''
    
            }
           }
           
    stage('scaning Dockerfile') {
    
          
      steps{
          sh '/usr/local/bin/trivy conf -f json -o trivy1.json ${WORKSPACE}/Dockerfile'
          sh 'cat trivy1.json'
          
            sh '''
             time=$(date +'%Y-%m-%d')        
		sudo curl --location --request POST 'http://192.168.228.132:8080/api/v2/import-scan/' \
--header 'Authorization: Token 2e0eb13f2aed51caf04f270f2c9b32359f321998' \
--form 'engagement="1"' \
--form 'verified="true"' \
--form 'active="true"' \
--form 'lead="1"' \
--form tags=$BUILD_NUMBER \
--form scan_date=$date \
--form 'scan_type="Trivy Scan"' \
--form 'minimum_severity="Info"' \
--form 'skip_duplicates="true"' \
--form 'close_old_findings="false"' \
--form 'file=@"trivy1.json"'

'''
      }
 }
 
    stage('Build Image')
{

steps{
  script {
      
      myImage = docker.build("mukeshit91/devsecops:latest")
  }
}
} 

stage('Deploy')
{
  steps {
      script {
         // withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'config-id', namespace: '', serverUrl: '') {
        //sh 'kubectl apply -f deployment.yml'
       // sh 'kubectl get pods'
       // sh 'docker run -d --name dvwa -p 81:80 mukeshit91/devsecops'
        sh 'docker ps'
      }
      }
   }
   
   stage ('DAST') {
		  
		    	steps {
			     script {
                     
               sh 'rm zap_report.xml || true'      
               sh 'ls -lrth'
                     //sh 'docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t http://18.222.18.171:32607/ -g gen.conf -r zap_report.html || true'
           sh 'docker run --user root -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py -t http://192.168.228.132:81 -g gen.conf -x zap_report.xml || true'
            //sh 'docker run --user $(id -u):$(id -g) -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t $target_url -g gen.conf -x zap_report.xml || true'
            sh 'cat zap_report.xml'
            sh '''
             time=$(date +'%Y-%m-%d')        
		sudo curl --location --request POST 'http://192.168.228.132:8080/api/v2/import-scan/' \
--header 'Authorization: Token 2e0eb13f2aed51caf04f270f2c9b32359f321998' \
--form 'engagement="1"' \
--form 'verified="true"' \
--form 'active="true"' \
--form 'lead="1"' \
--form tags=$BUILD_NUMBER \
--form scan_date=$date \
--form 'scan_type="ZAP Scan"' \
--form 'minimum_severity="Info"' \
--form 'skip_duplicates="true"' \
--form 'close_old_findings="false"' \
--form 'file=@"zap_report.xml"'

'''
}
}
}

stage ('Nikto Scan') 
        {
           
		    steps {
			sh 'rm nikto-output.xml || true'
			sh 'docker pull secfigo/nikto:latest'
			sh 'sudo docker run --user $(id -u):$(id -g) --rm -v $(pwd):/report -i secfigo/nikto:latest -h $target_url -output /report/nikto-output.xml'
			sh 'cat nikto-output.xml || true'
			sh '''
             time=$(date +'%Y-%m-%d')        
		sudo curl --location --request POST 'http://192.168.228.132:8080/api/v2/import-scan/' \
--header 'Authorization: Token 2e0eb13f2aed51caf04f270f2c9b32359f321998' \
--form 'engagement="1"' \
--form 'verified="true"' \
--form 'active="true"' \
--form 'lead="1"' \
--form tags=$BUILD_NUMBER \
--form scan_date=$date \
--form 'scan_type="Nikto Scan"' \
--form 'minimum_severity="Info"' \
--form 'skip_duplicates="true"' \
--form 'close_old_findings="false"' \
--form 'file=@"nikto-output.xml"'

'''
			
		    }
        }
        
    stage ('Port Scan') {
        	          

		    steps {
			sh 'rm nmap* || true'
			sh 'docker run --rm -v "$(pwd)":/data uzyexe/nmap -sS -sV -oX nmap $Nmap'
			sh 'cat nmap'
			sh '''
             time=$(date +'%Y-%m-%d')        
		sudo curl --location --request POST 'http://192.168.228.132:8080/api/v2/import-scan/' \
--header 'Authorization: Token 2e0eb13f2aed51caf04f270f2c9b32359f321998' \
--form 'engagement="1"' \
--form 'verified="true"' \
--form 'active="true"' \
--form 'lead="1"' \
--form tags=$BUILD_NUMBER \
--form scan_date=$date \
--form 'scan_type="Nmap Scan"' \
--form 'minimum_severity="Info"' \
--form 'skip_duplicates="true"' \
--form 'close_old_findings="false"' \
--form 'file=@"nmap"'

'''
			
			
		    }
         }     

  }
}

